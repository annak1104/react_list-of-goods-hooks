{"version":3,"sources":["App.tsx","index.tsx"],"names":["goodsFromServer","App","SortType","useState","sortedGoods","setSortedGoods","isVisibleReser","setIsVisibleReser","handleSort","filter","sorted","Alphabet","sort","Length","a","b","length","Reverse","reverse","className","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"uOAIaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGWC,EAAgB,WAC3B,IAMKC,EANL,EAGIC,mBAASH,GAHb,mBACEI,EADF,KAEEC,EAFF,KAIA,EAA4CF,oBAAS,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KAQA,SAASC,EAAWC,GAClB,IAAIC,EAAmB,GAEnBD,IAAWP,EAASS,WACtBD,EAAS,YAAIN,GAAaQ,QAGxBH,IAAWP,EAASW,SACtBH,EAAS,YAAIN,GAAaQ,MAAK,SAACE,EAAGC,GAAJ,OAAUD,EAAEE,OAASD,EAAEC,WAGpDP,IAAWP,EAASe,UACtBP,EAAS,YAAIN,GAAac,WAG5Bb,EAAeK,GACfH,GAAkB,IA7Ba,SAO5BL,KAP4B,oBAO5BA,EAP4B,gBAO5BA,EAP4B,mBAO5BA,MAP4B,KAiDjC,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAU,0BACVE,QAvB+B,WACrCb,EAAWN,EAASS,WAmBhB,iCAQA,wBACES,KAAK,SACLD,UAAU,6BACVE,QA3ByB,WAC/Bb,EAAWN,EAASW,SAuBhB,4BAQA,wBACEO,KAAK,SACLD,UAAU,6BACVE,QA/BoB,WAC1Bb,EAAWN,EAASe,UA2BhB,qBAOCX,GACC,wBACEc,KAAK,SACLD,UAAU,4BACVE,QAnCgB,WACxBhB,EAAeL,GACfO,GAAkB,IA8BZ,sBASJ,6BACGH,EACEkB,KAAI,SAAAC,GAAI,OAAI,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCrG/CC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.df400af4.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const App: React.FC = () => {\n  const [\n    sortedGoods,\n    setSortedGoods,\n  ] = useState(goodsFromServer);\n  const [isVisibleReser, setIsVisibleReser] = useState(false);\n\n  enum SortType {\n    Alphabet = 'alphabet',\n    Length = 'length',\n    Reverse = 'reverse',\n  }\n\n  function handleSort(filter: string) {\n    let sorted: string[] = [];\n\n    if (filter === SortType.Alphabet) {\n      sorted = [...sortedGoods].sort();\n    }\n\n    if (filter === SortType.Length) {\n      sorted = [...sortedGoods].sort((a, b) => a.length - b.length);\n    }\n\n    if (filter === SortType.Reverse) {\n      sorted = [...sortedGoods].reverse();\n    }\n\n    setSortedGoods(sorted);\n    setIsVisibleReser(true);\n  }\n\n  const handleButtonSortAlphabetically = () => {\n    handleSort(SortType.Alphabet);\n  };\n\n  const handleButtonSortByLength = () => {\n    handleSort(SortType.Length);\n  };\n\n  const handleButtonReverse = () => {\n    handleSort(SortType.Reverse);\n  };\n\n  const handleButtonReset = () => {\n    setSortedGoods(goodsFromServer);\n    setIsVisibleReser(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className=\"button is-info is-light\"\n          onClick={handleButtonSortAlphabetically}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"button is-success is-light\"\n          onClick={handleButtonSortByLength}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className=\"button is-warning is-light\"\n          onClick={handleButtonReverse}\n        >\n          Reverse\n        </button>\n        {isVisibleReser && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={handleButtonReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n      <ul>\n        {sortedGoods\n          .map(good => <li data-cy=\"Good\" key={good}>{good}</li>)}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}